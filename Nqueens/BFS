import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class NQueensBFS {

    static class Node {
        int[] board;
        int row;

        Node(int[] board, int row) {
            this.board = board.clone();
            this.row = row;
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of queens (n): ");
        int n = sc.nextInt();
        sc.close();
        solveNQueens(n);
    }

    public static void solveNQueens(int n) {
        Queue<Node> queue = new LinkedList<>();
        queue.add(new Node(new int[n], 0));

        while (!queue.isEmpty()) {
            Node node = queue.poll();

            if (node.row == n) {
                printSolution(node.board);
                return;
            }

            for (int col = 0; col < n; col++) {
                if (isSafe(node.board, node.row, col)) {
                    node.board[node.row] = col;
                    queue.add(new Node(node.board, node.row + 1));
                }
            }
        }

        System.out.println("Solution not found.");
    }

    private static boolean isSafe(int[] board, int row, int col) {
        for (int i = 0; i < row; i++) {
            if (board[i] == col || Math.abs(board[i] - col) == Math.abs(i - row)) {
                return false;
            }
        }
        return true;
    }

    private static void printSolution(int[] board) {
        int n = board.length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i] == j) {
                    System.out.print("Q ");
                } else {
                    System.out.print(". ");
                }
            }
            System.out.println();
        }
        System.out.println();
    }
}
