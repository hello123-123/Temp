#include <iostream>
#include <vector>
#include <utility>
#include <queue>

using namespace std;

// Function to find the position of the zero (empty tile) in the board
void findZero(vector<vector<int>>& board, int& x, int& y) {
    for (int i = 0; i < board.size(); i++) { // Iterate through the rows
        for (int j = 0; j < board[i].size(); j++) { // Iterate through the columns
            if (board[i][j] == 0) { // If the current element is the empty tile
                x = i; // Store the row index of the empty tile
                y = j; // Store the column index of the empty tile
                return; // Exit the function once the empty tile is found
            }
        }
    }
}

// Function to print the current state of the board
void printBoard(vector<vector<int>>& board) {
    for (int i = 0; i < board.size(); i++) { // Iterate through the rows
        for (int j = 0; j < board[i].size(); j++) { // Iterate through the columns
            cout << board[i][j] << " "; // Print each element separated by a space
        }
        cout << endl; // Print a new line after each row
    }
    cout << endl; // Print an additional new line after the entire board
}

// Function to check if the current board state matches the goal state
bool isGoalState(vector<vector<int>>& board, vector<vector<int>>& goal) {
    return board == goal; // Return true if the board and goal states are identical
}

// Function to count the number of misplaced tiles compared to the goal state
int findMisplacedTiles(vector<vector<int>>& board, vector<vector<int>>& goal) {
    int count = 0; // Initialize the count of misplaced tiles
    for (int i = 0; i < board.size(); i++) { // Iterate through the rows
        for (int j = 0; j < board[i].size(); j++) { // Iterate through the columns
            if (board[i][j] != goal[i][j]) // If the tile is not in its goal position
                count++; // Increment the count of misplaced tiles
        }
    }
    return count; // Return the total count of misplaced tiles
}

// A* algorithm to solve the puzzle
void aStar(vector<vector<int>>& board, vector<vector<int>>& goal, int depth, int x, int y) {
    // Priority queue to store states with their f-score (g + h), where g is the depth and h is the heuristic
    priority_queue<pair<int, vector<vector<int>>>, vector<pair<int, vector<vector<int>>>>,
    greater<pair<int, vector<vector<int>>>>> pq;

    int g = depth; // Initial depth (cost) is the input depth
    int h = findMisplacedTiles(board, goal); // Calculate the heuristic (number of misplaced tiles)
    pq.push({(g + h), board}); // Push the initial board with its f-score to the priority queue

    while (!pq.empty()) { // While there are states to process in the priority queue
        vector<vector<int>> curr = pq.top().second; // Get the board state with the lowest f-score
        pq.pop(); // Remove this state from the priority queue

        printBoard(curr); // Print the current board state

        int x, y;
        findZero(curr, x, y); // Find the position of the empty tile in the current state

        if (isGoalState(curr, goal)) { // Check if the current state is the goal state
            cout << "Goal State Reached" << endl; // Print a success message
            return; // Exit the function
        }

        // Define the possible moves: right, left, up, down
        int dx[] = {0, 0, -1, 1};
        int dy[] = {1, -1, 0, 0};

        for (int i = 0; i < 4; i++) { // Iterate through the possible moves
            int newX = x + dx[i]; // Calculate the new row position
            int newY = y + dy[i]; // Calculate the new column position

            // Check if the new position is within the bounds of the board
            if (newX >= 0 && newX < curr.size() && newY >= 0 && newY < curr[newX].size()) {
                swap(curr[x][y], curr[newX][newY]); // Swap the empty tile with the adjacent tile

                g = depth + 1; // Increment the depth (cost) by 1
                h = findMisplacedTiles(curr, goal); // Recalculate the heuristic for the new state
                pq.push({(g + h), curr}); // Push the new state with its f-score to the priority queue

                swap(curr[x][y], curr[newX][newY]); // Swap back to restore the current state
            }
        }
    }
    return; // Exit the function if no solution is found
}

int main() {
    int n=3; // Size of the board (n x n)
    // vector<vector<int>> initial = { // Define the initial state of the board
    //     {2, 8, 3},
    //     {1, 6, 4},
    //     {7, 0, 5}
    // };
    // vector<vector<int>> goal = { // Define the goal state of the board
    //     {1, 2, 3},
    //     {8, 0, 4},
    //     {7, 6, 5}
    // };


    vector<vector<int>> initial(n, vector<int>(n)); // Define the initial state of the board
    vector<vector<int>> goal(n, vector<int>(n)); // Define the goal state of the board

    // Prompt the user to enter the initial state
    cout << "Enter the initial state of the board:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> initial[i][j];
        }
    }

    // Prompt the user to enter the goal state
    cout << "Enter the goal state of the board:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> goal[i][j];
        }
    }

    int x, y; // Variables to store the position of the empty tile
    findZero(initial, x, y); // Find the initial position of the empty tile

    aStar(initial, goal, 0, x, y); // Call the A* algorithm to solve the puzzle
    return 0; // Return 0 to indicate successful execution
}
