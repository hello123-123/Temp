#include <iostream>

using namespace std;

#define N 9 // Size of the Sudoku grid

// Function to print the Sudoku grid
void print(int arr[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            cout << arr[i][j] << " ";
        cout << endl;
    }
}

// Function to check if it's safe to place a number in the given position
bool isSafe(int grid[N][N], int row, int col, int num) {
    // Check if the number exists in the current row or column
    for (int x = 0; x < N; x++)
        if (grid[row][x] == num || grid[x][col] == num)
            return false;

    // Determine the starting row and column of the current 3x3 subgrid
    int startRow = row - row % 3;
    int startCol = col - col % 3;

    // Check if the number exists in the current 3x3 subgrid
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (grid[i + startRow][j + startCol] == num)
                return false;

    return true; // It's safe to place the number
}

// Function to solve the Sudoku puzzle using backtracking
bool solveSudoku(int grid[N][N], int row, int col) {
    // If we reach the last row and column, the Sudoku puzzle is solved
    if (row == N - 1 && col == N)
        return true;

    // Move to the next row if we reach the end of the current row
    if (col == N) {
        row++;
        col = 0;
    }

    // Skip cells that are already filled
    if (grid[row][col] > 0)
        return solveSudoku(grid, row, col + 1);

    // Try placing numbers from 1 to 9 in the current cell
    for (int num = 1; num <= N; num++) {
        // Check if it's safe to place the number in the current cell
        if (isSafe(grid, row, col, num)) {
            // Place the number in the current cell
            grid[row][col] = num;

            // Recursively solve the remaining Sudoku puzzle
            if (solveSudoku(grid, row, col + 1))
                return true; // If a solution is found, return true

            // If no solution is found with the current number, backtrack
            grid[row][col] = 0;
        }
    }
    return false; // No solution exists
}

int main() {
    // Given Sudoku grid
    int grid[N][N] = {{3, 0, 6, 5, 0, 8, 4, 0, 0},
                      {5, 2, 0, 0, 0, 0, 0, 0, 0},
                      {0, 8, 7, 0, 0, 0, 0, 3, 1},
                      {0, 0, 3, 0, 1, 0, 0, 8, 0},
                      {9, 0, 0, 8, 6, 3, 0, 0, 5},
                      {0, 5, 0, 0, 9, 0, 6, 0, 0},
                      {1, 3, 0, 0, 0, 0, 2, 5, 0},
                      {0, 0, 0, 0, 0, 0, 0, 7, 4},
                      {0, 0, 5, 2, 0, 6, 3, 0, 0}};

    // Solve the Sudoku puzzle
    if (solveSudoku(grid, 0, 0))
        print(grid); // Print the solution
    else
        cout << "No solution exists." << endl; // If no solution exists

    return 0;
}
