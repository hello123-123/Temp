/*
 RatMaze BFS
 */

import java.util.*;

public class RatMazeBfs {

    static int[][] maze; // The maze grid
    static int N, M; // Dimensions of the maze

    // Function to find the path through the maze using BFS
    public static Set<int[]> findPath(int[][] ipMaze) {
        maze = ipMaze; // Set the maze grid
        N = maze.length; // Number of rows in the maze
        M = maze[0].length; // Number of columns in the maze

        // Initialize a LinkedHashSet to store the path of cells
        Set<int[]> path = new LinkedHashSet<>();
        // Initialize a boolean array to keep track of visited cells
        boolean[][] visited = new boolean[N][M];

        // Call the BFS function to find the path
        if (bfs(0, 0, path, visited)) {
            return path; // Return the path if found
        }
        return null; // Return null if no path is found
    }

    // BFS function to find the path through the maze
    public static boolean bfs(int row, int col, Set<int[]> path, boolean[][] visited) {
        // Check if the current cell is out of bounds, blocked, or already visited
        if (row < 0 || col < 0 || row >= N || col >= M || maze[row][col] == 1 || visited[row][col]) {
            return false; // Return false if the cell is invalid
        }

        // Create a queue for BFS
        Queue<int[]> queue = new ArrayDeque<>();
        queue.add(new int[] { row, col }); // Add the starting cell to the queue
        visited[row][col] = true; // Mark the starting cell as visited

        while (!queue.isEmpty()) {
            int[] cell = queue.poll(); // Dequeue a cell
            row = cell[0]; // Current row
            col = cell[1]; // Current column

            // If the current cell is the destination, return true
            if (row == N - 1 && col == M - 1) {
                path.add(new int[] { row, col }); // Add the destination cell to the path
                return true;
            }

            // Define directions: Up, Down, Left, Right
            int[][] directions = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };
            // Explore each direction
            for (int[] direction : directions) {
                int nextRow = row + direction[0]; // Next row
                int nextCol = col + direction[1]; // Next column

                // If the next cell is valid and not visited, enqueue it
                if (isValidCell(nextRow, nextCol) && !visited[nextRow][nextCol]) {
                    queue.add(new int[] { nextRow, nextCol }); // Enqueue the next cell
                    path.add(new int[] { row, col }); // Add the parent cell to the path
                    visited[nextRow][nextCol] = true; // Mark the next cell as visited
                }
            }
        }
        path.clear(); // Clear the path if no path is found
        return false; // Return false if no path is found
    }

    // Function to check if a cell is within bounds and not blocked
    private static boolean isValidCell(int row, int col) {
        return row >= 0 && row < N && col >= 0 && col < M && maze[row][col] == 0;
    }

    // Main method
    public static void main(String[] args) {
        // Define the maze grid
        int[][] maze = {
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 0, 0, 1, 0 },
            { 1, 0, 0, 0 },
        };

        // Print the maze
        for (int i = 0; i < maze.length; i++) {
            for (int j = 0; j < maze[i].length; j++) {
                System.out.print(" " + maze[i][j] + " ");
            }
            System.out.println();
        }

        // Find the path through the maze using BFS
        Set<int[]> path = findPath(maze);
        
        // Print the path if found
        if (path != null) {
            System.out.println("Path found!!");
            for (int[] temp : path) {
                System.out.println(temp[0] + "," + temp[1]); // Print each cell in the path
            }
        } else {
            System.out.println("Path Not Found!");
        }
    }
}
