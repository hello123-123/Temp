// Water Jug Dls
import java.util.*;

public class WaterJugDLS {

    static class Node {
        int x; // Amount of water in jug 1
        int y; // Amount of water in jug 2
        List<Node> path; // Path to reach the current state

        public Node(int x, int y, List<Node> path) {
            this.x = x;
            this.y = y;
            this.path = new ArrayList<>(path); // Initialize path with a copy of the parent path
            this.path.add(this); // Add the current node to the path
        }
    }

    // Depth-Limited Search (DLS) function
    public static boolean solveDLS(int jug1, int jug2, int targetX, int targetY, int maxDepth) {
        Set<String> visited = new HashSet<>(); // Set to keep track of visited states
        Node startNode = new Node(0, 0, new ArrayList<>()); // Start with both jugs empty
        return dls(startNode, jug1, jug2, targetX, targetY, maxDepth, visited); // Call the DLS function
    }

    // Recursive Depth-Limited Search (DLS) function
    private static boolean dls(Node current, int jug1, int jug2, int targetX, int targetY, int depth, Set<String> visited) {
        if (depth < 0) {
            return false; // Reached the maximum depth limit, return false
        }

        int curX = current.x; // Current amount of water in jug 1
        int curY = current.y; // Current amount of water in jug 2
        visited.add(curX + "," + curY); // Mark the current state as visited

        // If we reach the target state
        if (curX == targetX && curY == targetY) {
            // Print the path to reach the target state
            for (Node node : current.path) {
                System.out.println("(" + node.x + "," + node.y + ")");
            }
            return true; // Return true to indicate the solution is found
        }

        // Define possible next states based on jug operations
        List<Node> nextStates = Arrays.asList(
            new Node(jug1, curY, current.path),    // Fill jug1
            new Node(curX, jug2, current.path),    // Fill jug2
            new Node(0, curY, current.path),       // Empty jug1
            new Node(curX, 0, current.path),       // Empty jug2
            new Node(Math.min(jug1, curX + curY), curY - (Math.min(jug1, curX + curY) - curX), current.path),  // Pour jug2 -> jug1
            new Node(curX - (Math.min(jug2, curX + curY) - curY), Math.min(jug2, curX + curY), current.path)   // Pour jug1 -> jug2
        );

        // Explore each next state recursively
        for (Node next : nextStates) {
            // If the next state has not been visited and leads to a solution, return true
            if (!visited.contains(next.x + "," + next.y) && dls(next, jug1, jug2, targetX, targetY, depth - 1, visited)) {
                return true;
            }
        }

        visited.remove(curX + "," + curY); // Remove the current state from visited states
        return false;  // No solution found
    }

    // Main method
    public static void main(String[] args) {
        int jug1 = 4; // Capacity of jug 1
        int jug2 = 3; // Capacity of jug 2
        int targetX = 2; // Target amount of water in jug 1
        int targetY = 0; // Target amount of water in jug 2
        int maxDepth = 10;  // Define a maximum depth limit for the search

        // Solve the Water Jug problem using Depth-Limited Search
        boolean result = solveDLS(jug1, jug2, targetX, targetY, maxDepth);

        // Print the result
        if (!result) {
            System.out.println("No solution found.");
        }
    }
}
